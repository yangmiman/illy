#!/bin/bash

set -e

if [[ -z $1 ]]; then
    >&2 echo "Usage:"
    >&2 echo -e "\t$0 <domain>"
    exit 1
fi

exec 3>&1 4>&2 >>/var/micropcf/run.log 2>&1

domain=$1

monit="/var/vcap/bosh/bin/monit"

total_services() { $monit summary | grep -E '^(Process|File|System)' | wc -l; }
started_services() { $monit summary | grep -E '(running|accessible|Timestamp changed|PID changed)' | wc -l; }
stopped_services() { $monit summary | grep 'not monitored' | grep -v 'pending' | wc -l; }
cc_status_code() { curl -s -I -o /dev/null -w %{http_code} http://api.$domain/v2/info; }
available_buildpacks() { cf curl /v2/buildpacks | jq '.resources | map(select(.entity.filename | length > 0)) | length'; }

$monit stop all || true

while [[ $(total_services) != 0 ]] && [[ $(stopped_services) -lt $(total_services) ]]; do
  sleep 1
done

stop runsvdir || true

while [[ $(total_services) != 0 ]]; do
  sleep 1
done

config_files=$(find /var/vcap/jobs/*/ /var/vcap/monit/job /var/micropcf/manifest.yml -type f)

host_ip=$(ip route show dev eth1 | awk '{print $NF;exit}' | awk -F'.' '{print $1 "." $2 "." $3 ".1" }')

ip=$(ip route get 1 | awk '{print $NF;exit}')
old_ip=$(cat /var/micropcf/ip)
perl -p -i -e "s/\\Q$old_ip\\E/$ip/g" $config_files
echo $ip > /var/micropcf/ip

old_domain=$(cat /var/micropcf/domain)
perl -p -i -e "s/\\Q$old_domain\\E/$domain/g" $config_files
echo $domain > /var/micropcf/domain

mkdir -p /tmp/cc_tmp
chgrp vcap /tmp/cc_tmp
chmod 1777 /tmp/cc_tmp

cc_worker_ctl=/var/vcap/jobs/cloud_controller_ng/bin/cloud_controller_worker_ctl
grep -q 'export TMPDIR=\/tmp\/cc_tmp' "$cc_worker_ctl" || sed -i '2iexport TMPDIR=/tmp/cc_tmp' "$cc_worker_ctl"

start runsvdir || true

while [[ $(total_services) = 0 ]]; do
  sleep 1
done

$monit start all

>&3 echo "Waiting for services to start..."
while [[ $(started_services) -lt $(total_services) ]]; do
  sleep 1
done

while [[ $(cc_status_code) != 200 ]]; do
  sleep 1
done

cat > /var/micropcf/host-security-group.json <<EOF
[
 {
   "protocol": "tcp",
   "destination": "${host_ip}",
   "ports": "1-65535"
 }
]
EOF

cf api "api.$domain" --skip-ssl-validation
cf auth admin admin
cf create-org micropcf-org
cf create-space micropcf-space -o micropcf-org
cf target -o micropcf-org -s micropcf-space
cf enable-feature-flag diego_docker
cf create-security-group host /var/micropcf/host-security-group.json
cf bind-running-security-group host

while [[ $(available_buildpacks) -lt 8 ]]; do
  sleep 1
done

if [[ -x /var/micropcf/post-run ]]; then
 /var/micropcf/post-run $domain
fi

exec 1>&3 2>&4

echo "MicroPCF is now running."
echo "To begin using MicroPCF, please run:"
echo -e "\tcf api api.$domain --skip-ssl-validation"
echo -e "\tcf login"
echo "Email: admin"
echo "Password: admin"
