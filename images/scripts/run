#!/bin/bash

set -e

if [[ -z $1 ]] || [[ -z $2 ]]; then
    >&2 echo "Usage:"
    >&2 echo -e "\t$0 <domain> <public-ip>"
    exit 1
fi

exec 3>&1 4>&2 >>/var/pcfdev/run.log 2>&1

source /var/pcfdev/common

domain=$1
public_ip=$2

if status runsvdir | grep -q 'start/running'; then
  wait_for_monit_to_start
  $monit stop all

  >&3 echo "Waiting for services to stop..."

  wait_for_services_to_stop
  stop runsvdir
  wait_for_monit_to_stop
fi

config_files=$(find /var/vcap/jobs/*/ /var/vcap/monit/job /var/pcfdev/manifest.yml -type f)

ip=$(ip route get 1 | awk '{print $NF;exit}')
old_ip=$(cat /var/pcfdev/ip)
ip_with_commas=$(echo $ip | tr '.' ',')
old_ip_with_commas=$(echo $old_ip | tr '.' ',')
perl -p -i -e "s/\\Q$old_ip\\E/$ip/g" $config_files
perl -p -i -e "s/\\Q$old_ip_with_commas\\E/$ip_with_commas/g" $config_files
echo $ip > /var/pcfdev/ip

old_domain=$(cat /var/pcfdev/domain)
perl -p -i -e "s/\\Q$old_domain\\E/$domain/g" $config_files
echo $domain > /var/pcfdev/domain

resolvconf --disable-updates

echo "address=/.$domain/$public_ip" > /etc/dnsmasq.d/domain
echo "listen-address=$ip" > /etc/dnsmasq.d/interface

service dnsmasq stop

host_ns="$(grep -v "nameserver \($ip\|$old_ip\|127.0.0.1\)" /etc/resolv.conf | grep -m 1 '^nameserver' || true)"
cat <<EOF >/etc/resolv.conf
nameserver 127.0.0.1
nameserver $ip
$host_ns
EOF

service dnsmasq start

mkdir -p /tmp/cc_tmp
chgrp vcap /tmp/cc_tmp
chmod 1777 /tmp/cc_tmp

cc_worker_ctl=/var/vcap/jobs/cloud_controller_ng/bin/cloud_controller_worker_ctl
grep -q 'export TMPDIR=\/tmp\/cc_tmp' "$cc_worker_ctl" || sed -i '2iexport TMPDIR=/tmp/cc_tmp' "$cc_worker_ctl"

if [[ $CF_ONLY = true ]]; then
  pushd /var/vcap/monit/job
    rm -f \
      *_rabbitmq-server.monitrc \
      *_rabbitmq-broker.monitrc \
      *_mysql.monitrc \
      *_cf-mysql-broker.monitrc \
      *_cf-redis-broker.monitrc \
      *_syslog-configurator.monitrc
  popd
  rm -f /var/pcfdev/post-run
fi

start runsvdir

wait_for_monit_to_start

$monit start all

>&3 echo "Waiting for services to start..."
while total=$(total_services) && [[ $total -eq 0 ]]; do
  sleep 1
done

while started=$(started_services) && [[ $started -lt $total ]]; do
  counter=$(($counter + 1))
  [[ $(($counter % 60)) = 0 ]] && >&3 echo "$started out of $total running"
  sleep 1
done
>&3 echo "$total out of $total running"

while [[ $(cc_status_code "$domain") != 200 ]]; do
  sleep 1
done

host_security_group=$(cat <<EOF
[
 {
   "protocol": "tcp",
   "destination": "$public_ip",
   "ports": "1-65535"
 }
]
EOF)

cf api "api.$domain" --skip-ssl-validation
cf auth admin admin

[[ $domain != $old_domain ]] && cf delete-shared-domain "$old_domain" -f

cf create-org pcfdev-org
cf create-space pcfdev-space -o pcfdev-org
cf target -o pcfdev-org -s pcfdev-space

cf enable-feature-flag diego_docker
cf update-security-group host <(echo "$host_security_group") || cf create-security-group host <(echo "$host_security_group")
cf bind-running-security-group host

while [[ $(available_buildpacks) -lt 8 ]]; do
  sleep 1
done

if [[ -x /var/pcfdev/post-run ]]; then
 /var/pcfdev/post-run $domain
fi

exec 1>&3 2>&4

echo "PCF Dev is now running."
echo "To begin using PCF Dev, please run:"
echo -e "\tcf api api.$domain --skip-ssl-validation"
echo -e "\tcf login"
echo "Email: admin"
echo "Password: admin"
