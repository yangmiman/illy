monit="/var/vcap/bosh/bin/monit"

monit_summary() { while output=$($monit summary 2>&1) && [[ $output = *"error connecting to the monit daemon"* ]]; do sleep 1; done; echo "$output"; }
total_services() { monit_summary | grep -E '^(Process|File|System)' | wc -l; }
started_service_count() { started_services | wc -l; }
started_services() { monit_summary | grep -E '(running|accessible|Timestamp changed|PID changed)' | awk '{print $2}' | tr -d "'"; }
stopped_service_count() { stopped_services | wc -l; }
stopped_services() { monit_summary | grep 'not monitored' | grep -v 'pending' | awk '{print $2}' | tr -d "'"; }
cc_status_code() { curl -s -I -o /dev/null -w %{http_code} -H "Host: api.$1" http://localhost/v2/info; }
available_buildpacks() { cf curl /v2/buildpacks | jq '.resources | map(select(.entity.filename | length > 0)) | length'; }
wait_for_monit_to_start() { while [[ $(total_services) = 0 ]]; do sleep 1; done; }
wait_for_monit_to_stop() { while [[ $(total_services) != 0 ]]; do sleep 1; done; }
wait_for_services_to_stop() { while [[ $(stopped_service_count) -lt $(total_services) ]]; do sleep 1; done; }

start_services() {
  for service in $@; do
    $monit start $service
  done

  for service in $@; do
    while ! monit_summary | grep $service | grep -q running; do sleep 1; done;
  done
}

start_remaining() { 
  for service in $(stopped_services); do
    $monit start $service
  done
}

move_monit_control_files() {
  find /var/vcap/monit/job -name '*.monitrc' | grep -v pcfdev | xargs rm -f

  for file in $(ls /var/vcap/jobs/*/monit)
  do
    local dirname=$(dirname $file)
    local jobname=$(basename $dirname)
    local destination_path="/var/vcap/monit/job/$(next_monit_index)-${jobname}.monitrc"
    cp $file $destination_path
    sed -i '/group vcap/a\ \ mode manual' $destination_path
  done
}

exists_in_monit() {
  grep $1 /var/vcap/monit/job/* -q
}

find_monit_file() {
  grep $1 /var/vcap/jobs/*/monit -l
}

next_monit_index(){
  printf %04d $(ls /var/vcap/monit/job/ | wc -l)
}

restart_service() {
  local service=$1
  $monit restart $service
  while ! monit_summary | grep $service | grep -v pending | grep -q running; do sleep 1; done;
}

update_service_broker() {
  local broker_name=$1
  local broker_url=$2
  echo "Service broker already exists - updating broker"
  cf update-service-broker ${broker_name} admin admin ${broker_url}
}

create_service_broker() {
  local broker_name=$1
  local broker_url=$2
  echo "Service broker does not exist - creating broker"
  cf create-service-broker ${broker_name} admin admin ${broker_url}
}

setup_service_broker() {
  local broker_name=$1
  local broker_url=$2
  while [[ $(curl -s -o /dev/null -u admin:admin -w %{http_code} ${broker_url}/v2/catalog) != 200 ]]; do
    sleep 1
  done
  create_service_broker $broker_name $broker_url || update_service_broker $broker_name $broker_url
  cf enable-service-access ${broker_name}
}
