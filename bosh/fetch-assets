#!/bin/bash

set -e

if [[ -z $(which jq) ]]; then
    >&2 echo -e "\t'jq' not found in the PATH"
    >&2 echo -e "\t Please install jq in order to continue"
    >&2 echo -e "\t https://stedolan.github.io/jq/"
    exit 1
fi

if [[ -z $1 ]] || [[ -z $2 ]] || [[ ! -d $(dirname "$2") ]]; then
  >&2 echo "Usage:"
  >&2 echo -e "\t$0 /path/to/versions.json /path/to/pcfdev-workspace"
  exit 1
fi

set -x

pcfdev_dir=$(cd `dirname $0` && cd .. && pwd)
bosh_gopath=$pcfdev_dir/bosh

versions_json_path=$1
output_dir=$2
assets_dir=${output_dir}/assets

rm -rf "$assets_dir"/{releases,extras,versions,monit,agent}
mkdir -p "$assets_dir"/{releases,extras,versions}

cp -r "$bosh_gopath/src/github.com/cppforlife/bosh-provisioner/assets"/{monit,agent} "$assets_dir/"
GOOS=linux GOARCH=amd64 GOPATH=$bosh_gopath GO15VENDOREXPERIMENT=1 \
  go build -a -o "$assets_dir/bosh-provisioner" github.com/cppforlife/bosh-provisioner/main

versions=$(cat "$versions_json_path")
number_of_releases=$(echo $versions | jq '.releases | length')
for i in $(seq 0 $((number_of_releases -1))); do
  name=$(echo $versions | jq .releases[$i].name -r)
  url=$(echo $versions | jq .releases[$i].compiled_release_url -r)
  path=$(echo $versions | jq .releases[$i].path -r)
  if [[ $path != null ]]; then
    "$pcfdev_dir/bosh/build" "$path" "$name" "${assets_dir}/releases" 
  elif [[ $url != null ]]; then
    if [[ ${url:0:5} == "s3://" ]]; then
      aws s3 cp "$url" "${assets_dir}/releases/${name}-0.tgz"
    elif [[ ${url:0:7} == "http://" ]] || [[ ${url:0:8} == "https://" ]]; then
      curl -o "${assets_dir}/releases/${name}-0.tgz" -L ${url}
    else
      echo "Invalid scheme for url: ${url}"
      exit 1
    fi
  fi
done

number_of_extras=$(echo $versions | jq '.extras | length')
echo "$number_of_extras extras"
if [[ $number_of_extras > 0 ]]; then
  for i in $(seq 0 $((number_of_extras -1))); do
    name=$(echo $versions | jq .extras[$i].name -r)
    url=$(echo $versions | jq .extras[$i].url -r)
    aws s3 cp "$url" "${assets_dir}/extras/${name}.tgz"
  done
fi

cp "$versions_json_path" "$assets_dir/versions"
cp -a "$pcfdev_dir"/images/{http,keys,scripts} "$output_dir"
