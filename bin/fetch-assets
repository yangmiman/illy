#!/bin/bash

set -e

if [[ -z $(which jq) ]]; then
    >&2 echo -e "\t'jq' not found in the PATH"
    >&2 echo -e "\t Please install jq in order to continue"
    >&2 echo -e "\t https://stedolan.github.io/jq/"
    exit 1
fi

if [[ -z $1 ]] || [[ -z $2 ]] || [[ -z $3 ]] || [[ ! -d $(dirname "$2") ]]; then
  >&2 echo "Usage:"
  >&2 echo -e "\t$0 /path/to/versions.json /path/to/pcfdev-workspace distribution"
  exit 1
fi

shasum_matches() {
  path=$1
  checksum=$2

  if [[ ! -f "$path" ]]; then
    return 1
  fi

  if hash shasum 2>/dev/null; then
    if [[ $(shasum -a 1 "$path" | cut -d ' ' -f 1) != "$checksum" ]]; then
        return 1
    fi
  elif hash sha1sum 2>/dev/null; then
    if [[ $(sha1sum "$path" | cut -d ' ' -f 1) != "$checksum" ]]; then
        return 1
    fi
  else
     >&2 echo -e "\t Could not verify hash of downloaded resource, no shasum or sha1sum installed"
     exit 1
  fi
}

versions_json_path=$1
output_dir=$2
distro=$3

assets_dir=$output_dir/assets
releases_dir=$(cd "$output_dir" && cd .. && pwd)/releases
pcfdev_dir=$(cd `dirname $0` && cd .. && pwd)

mkdir -p "$assets_dir"/{releases,extras,versions}
mkdir -p "$releases_dir"

GOOS=linux GOARCH=amd64 GOPATH=$pcfdev_dir \
  go build -a -ldflags "-X main.distro=${distro}" -o "$assets_dir/scripts/provision" provisioner

GOOS=linux GOARCH=amd64 GOPATH=$pcfdev_dir \
  go build -a -o "$assets_dir/scripts/api/api" api

cp -r "$pcfdev_dir/src/github.com/cppforlife/bosh-provisioner/assets"/{monit,agent} "$assets_dir/"
GOOS=linux GOARCH=amd64 GOPATH=$pcfdev_dir \
  go build -a -o "$assets_dir/bosh-provisioner" github.com/cppforlife/bosh-provisioner/main

versions=$(cat "$versions_json_path")
releases=$(echo "$versions" | jq -r '.releases | keys[]')

for name in $releases; do
  url=$(echo "$versions" | jq ".releases.\"$name\".compiled_release_url" -r)
  sha1=$(echo "$versions" | jq ".releases.\"$name\".sha1" -r)
  path=$(echo "$versions" | jq ".releases.\"$name\".path" -r)
  output_path="$releases_dir/$name-0.tgz"

  if [[ $path != null ]]; then
    "$pcfdev_dir/bin/compile-release" "$path" "$name" "$releases_dir"
  elif [[ $url != null ]]; then
    if shasum_matches "$output_path" "$sha1"; then
      continue
    fi

    if [[ ${url:0:5} == "s3://" ]]; then
      aws s3 cp --quiet "$url" "$output_path"
    elif [[ ${url:0:7} == "http://" ]] || [[ ${url:0:8} == "https://" ]]; then
      curl -s -o "$output_path" -L "$url"
    else
      echo "Invalid scheme for url: $url"
      exit 1
    fi

    if ! shasum_matches "$output_path" "$sha1"; then
      echo "Download failed (sha1 did not match) for: $url"
      exit 1
    fi
  fi

done

cp "$releases_dir"/*.tgz "$assets_dir/releases"

if [[ $(echo "$versions" | jq -r 'has("extras")') == 'true' ]]; then
  extras=$(echo "$versions" | jq -r '.extras | keys[]')
  for name in $extras; do
    url=$(echo "$versions" | jq ".extras.\"$name\".url" -r)
    extension=${url##*.}
    aws s3 cp --quiet "$url" "$assets_dir/extras/$name.$extension"
  done
fi

cp "$versions_json_path" "$assets_dir/versions"
cp -a "$pcfdev_dir"/preseed "$output_dir"
cp -a "$pcfdev_dir"/assets/keys "$assets_dir"
cp -a "$pcfdev_dir"/assets/scripts "$assets_dir"
